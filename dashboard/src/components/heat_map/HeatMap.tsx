import CircularProgress from '@material-ui/core/CircularProgress';
import Plotly from 'plotly.js';
import React, { lazy, useState } from 'react';
import styled from 'styled-components';

import { Typography } from '../../components/common/Typography';
import {
  FRAME_TRANSITION_DURATION,
  ROOM_IMAGE_PATH,
} from '../../components/heat_map/constants';
import { useHeatMapMeasurementData } from '../../components/heat_map/useHeatMapMeasurementData';
import { useCropCycleDetails, useFeatureFlags } from '../../contexts';
import { useScreenSize } from '../../hooks/useScreenSize';
import { MeasurementTypes } from '../../shared/interfaces';
import { getEnumerationTypeFromMeasurmentOption } from '../../shared/utils';

const HeatMapView = lazy(() => import('../../components/heat_map/HeatMapView'));
const MeasurementTypeBar = lazy(
  () => import('../../components/measurement_type_bar/MeasurementTypeBar')
);
const NoDataView = lazy(() => import('../../components/error/NoDataView'));

export interface HeatMapProps {
  /**
   * System Id that will be used to get the heatmaps generated by it.
   */
  systemId: number;
}

/**
 * Renders heatmap of a given measurement run.
 *
 * @param {HeatMapProps} props property including the measurement run id.
 * @returns {JSX.Element} heatmap component.
 */
const Heatmap: React.FC<HeatMapProps> = ({ systemId }) => {
  const [measurementOption, setMeasurementOption] = useState(
    MeasurementTypes.Temperature
  );
  const { isMobile } = useScreenSize();
  const { range, lightInfo } = useCropCycleDetails();
  const { airflowSensorFlag } = useFeatureFlags();

  const {
    loading: loadingMeasurement,
    error: measurementLoadingError,
    frames,
    frameList,
    statistic,
    plotData,
  } = useHeatMapMeasurementData({
    systemId,
    start: range.start,
    end: range.end,
    enumeration: getEnumerationTypeFromMeasurmentOption(
      measurementOption,
      isMobile
    ),
  });

  const transition: Plotly.Transition = {
    duration: FRAME_TRANSITION_DURATION,
    easing: 'circle',
  };

  if (measurementLoadingError) {
    return <Container>{measurementLoadingError}</Container>;
  }

  if (loadingMeasurement) {
    return <CircularProgress />;
  }

  if (!frameList.length) {
    return (
      <Container>
        <NoDataView />
      </Container>
    );
  }

  return (
    <Container>
      <MeasurementTypeBar
        airflowSensorFlag={airflowSensorFlag}
        value={measurementOption}
        onOptionChange={setMeasurementOption}
      />
      <Typography variant="h6">{measurementOption}</Typography>
      <HeatMapView
        frames={frames}
        frameList={frameList}
        layoutImageUrl={ROOM_IMAGE_PATH}
        lightInfo={lightInfo}
        measurementOption={measurementOption}
        statistic={statistic}
        plotData={plotData}
        transition={transition}
      />
    </Container>
  );
};

export default Heatmap;

const Container = styled.div`
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 12px;
`;
